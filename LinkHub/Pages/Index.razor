@page "/"
@using LinkHubApp.Models
@inject AuthenticationStateProvider AuthStateProvider




<h3>Glance Bookmark</h3>

<!-- 입력 폼 -->
<div class="mb-3">
    <input placeholder="Title" class="form-control" @bind="newTitle" />
    <input placeholder="Link(URL)" class="form-control mt-2" @bind="newUrl" />

    <select class="form-select mt-2" @bind="selectedCategory">
        @foreach (var cat in categories)
        {
            <option>@cat</option>
        }
    </select>

    <button class="btn btn-primary mt-2" @onclick="AddLink">Add</button>
</div>

<!-- 새 카테고리 추가 -->
<div class="mt-3">
    <input class="form-control" placeholder="Add Category" @bind="newCategory" />
    <button class="btn btn-secondary mt-1" @onclick="AddCategory">Add Category</button>
</div>

<!-- 검색/필터 컴포넌트 -->
<SearchAndFilter 
    @bind-SearchKeyword="searchKeyword" 
    @bind-FilterCategory="filterCategory"
    Categories="categories" />

<!-- 링크 리스트 컴포넌트 -->
<LinkList 
    Links="links" 
    Categories="categories" 
    SearchKeyword=@searchKeyword
    FilterCategory=@filterCategory
    CurrentUserId=@currentUserId
    OnDelete=@(link => RemoveLink(link)) />

@code {
    List<LinkItem> links = new();

    string newTitle = "";
    string newUrl = "";
    string selectedCategory = "Development";
    string newCategory = "";

    string searchKeyword = "";
    string filterCategory = "All";

    string currentUserId = "anonymous";

protected override async Task OnInitializedAsync()
{
    var authState = await AuthStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user.Identity != null && user.Identity.IsAuthenticated)
    {
        currentUserId = user.Identity.Name;
    }
}


    List<string> categories = new() { "Development", "Design", "General", "IT School", "Recruitment", "Other" };


    

    void AddLink()
    {
            Console.WriteLine($"🔽 AddLink() called by: {currentUserId}");

        if (!string.IsNullOrWhiteSpace(newTitle) && !string.IsNullOrWhiteSpace(newUrl))
        {
            links.Add(new LinkItem { Title = newTitle, Url = newUrl, 
            Category = selectedCategory,
            UserId = currentUserId });

            //reset input fields
            newTitle = "";
            newUrl = "";

            StateHasChanged();
        }
    }

    void AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory) && !categories.Contains(newCategory))
        {
            categories.Add(newCategory);
            newCategory = "";
        }
    }

    void RemoveLink(LinkItem link)
    {
        links.Remove(link);
    }
}
